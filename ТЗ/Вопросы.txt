1. Разрабатывается Telegram бот, допустим с использованием библиотеки pyTelegramBotAPI.
2. Скачиваем версию python 3.11.9 https://www.python.org/downloads/release/python-3119/


Административная часть:

1. Найти примеры webapps https://core.telegram.org/bots/webapps.


2. Нарисовать свою админку.


3. Если использоать FastAPI, то для админки уже есть авторизация, управление паролями, JWT токены в fastapi-users!
    * Но нужно как-то привязать Telegram...
    * Определить роли и в админку пускать только с ролью ADMIN?


4. Если пользователь обладает правами администратора, то в меню бота для него должна добавляться кнопка открытия административной панели (webapps).
  В меню добавляется кнопка:
  5. Админ (?)
    Открывается / запускается webapps, который открывает страничку, допустим 'https://hiring-service.ru/' и отображает в Telegram.
	
	1. Ендпоинты страницы:
      - admin/ 
	    * Что должна содержать главная страница?  - Как минимум кнопку *Добавить пользователя*. 
		* Должен быть поиск пользователей?
		* Может есть админка для FastAPI?  - Например SQLAlchemy Admin.
	  - admin/login/  - должны ввести логин и пароль. (В ответ получить JWT токен)
	  - admin/logout/
	  - admin/password_change/
	  Отрисовка страниц может выполняться на шаблонах, как было на Django, только для FastAPI.
	    * Разобраться как работает SQLAlchemy Admin, какие есть ендпоинты и т.д.
	  
      Функционал админки:

        1. Создание/редактирование/блокировка/удаление пользователей
  
          POST admin/users/create/
		  PATCH admin/users/<tg_id>/
		  DELETE admin/users/<tg_id>/
		
		  * Должно быть реализовано через SQLAlchemy Admin.
	
      Интеграция с Telegram:
	    Бот получает данные через обработчик handle_web_app_data
	
	
    2. Создание/редактирование списка ключевых слов
        * Что это вообще? База, к которой должно обращаться приложение, что бы что?  - Что бы сравнивать с ней слова приведенные к им. пад. ед. ч.
		
      Исключается дублирование слов. Слова задаются в начальной форме (им. падеж, ед. число).
	  Должна быть предусмотрена возможность загрузки списка слов из внешнего источника.
	    * Что за внешний источник, может это файл .csv на компе.
	  

    3. Создание/редактирование списка стоп слов
  
      Аналогично п.2
	  
	  
	4. Создание/редактирование/удаление поздравлений с днем рождения
	
	
	5. Добавление/удаление веселых картинок для поздравлений


--------------------------------------------------------------------
Общая рабочая часть:

1. Осуществить идентификацию пользователя по tg_id.
  Кто то сказал боту /start, бот взял tg_id пользователя и отправил на FastAPI сервер, на ручку проверки get_telegram_user(tg_id)
  
  GET users/<tg_id>
  
  если ручка вернула пользователя, то продолжаем работу.
  
2. Меню бота:

  * Может быть можно отключить возможность писать сообщения находясь в главном меню.

  1. Проверка (?):
    При нажатии на 'Проверка ключевых слов' – Бот предлагает пользователю ввести текст вакансии.
	  * Как осуществляется подменю, подпрограмма?
	  * Как осуществить это ожидание? НУЖНО ИСПОЛЬЗОВАТЬ КОНТЕКСТЫ, что бы бот понимал, что пользователь находится в процессе выполнения определенной команды, и обрабатывать его следующий ввод в контексте этой команды.
	  * Стоп-слова — это слова, которые поисковые системы или платформы игнорируют при обработке запроса.
	  * А что будет если написать 'Люблю оранжевый закат', поиск по существительным?
	  
	Кто то пишет вакансию типа 'питон программист' или 'программист на питоне' и отправляет в бот.
	  В подпрограмме:
	    1. 'Парсим' строку отдельная фича. Строка должна обработатся так, что приведет слова в ней к именительному падежу в ед. числе. Выдаст список слов ['программист', 'питон'].
		2. Ищем в базах 'Ключевая' и 'Стоп' совпадения.
		3. Если есть совпадения выводим типа:
		  В базе 'Ключевая' - нашлось слово `питон`.
		  В базе 'Стоп' - ничего не нашлось.
		  Кнопки:
		  *Ввести новый текст*
		  *Вернуться в главное меню*


  2. Вакансии (?):
    При нажатии на 'Поиск вакансий' – Бот предлагает пользователю ввести текст вакансии.
	  В подпрограмме:
    	1. Те же действия 1 и 2, как и в 'Проверка'
		2. Если найдены совпадения с базой 'Стоп', то исключаем такие слова из списка.
		3. Если найдены совпадения с базой 'Ключевая' отправляем совпавшие слова в AmoCRM.
		4. Если есть ответ, обрабатывам его и распечатываем кнопки с именами компаний.
		5. Кто-то нажимает на одну из кнопок, опять должен быть режим подпрограммы (контекст):
	      В ней:
	       1. Парсим запрос, отправляем в AmoCRM.
		   2. Обрабатываем ответ, выводим информацию о вакансиях в компании и информацию о менеджере.
		Кнопки:
		  *Выполнить новый поиск*
		  *Вернуться в главное меню*


  3. Коллеги (?)
    При нажатии 'Коллеги' –	Бот предлагает пользователю ввести имя и/или фамилию коллеги.
	  В подпрограмме:
	    1. Получаем строку, обращаемся к FastAPI серверу на ручку поиска пользователей.
		  * Должны как то понять, что строка это Имя Фамилия, а не жуть или нет?
		  * Поиск осуществляется и по имени и по фамилии. Значит если ищут Ивана, то найдутся все Иваны, если Ивана Иванова, то только Иван Иванов.
		  * Структура ответа от FastAPI?
		2. Если нашли распечатываем кнопками *Имя Фамилия*
		  * Нужно подумать как делать пагинацию!
	    3. Кто-то нажимает на одну из кнопок:
		  В подпрограмме:
		    1. Выполняется запрос к FastAPI серверу.
			2. Обрабатывается ответ, выводится информация
		Кнопки:
		  *Выполнить новый поиск*
		  *Вернуться в главное меню*


  4. Напоминания (?)
    При нажатии 'Напоминания' –	Бот запрашивает у пользователя подтверждение подписки.
	  * Как работать с подписками?
	  * Платные они или нет?  - Бесплатные пока (?)
	  * Что происходит, когда пользователь подтверждает подписку?  - Просто ставиться флаг в БД (?)
	Должна крутиться программа, которая ежедневно просматривает БД Users и тем, у кого есть флаг подписки отправляет уведомления, если находит ДР у коллег.
	  * Как запустить такую программу обходчик с интервалом 24 часа?
	
	
1. Ендпоинты FastAPI
2. Логирование?